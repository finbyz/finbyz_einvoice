import re

import frappe
from frappe import _
from frappe.utils.data import time_diff_in_seconds
import base64
import os
from frappe.utils import now_datetime

from finbyz_einvoice.gst_india.api_classes.base import BaseAPI
from finbyz_einvoice.gst_india.constants import DISTANCE_REGEX
from frappe.integrations.utils import make_request
from frappe.utils.password import get_decrypted_password
from frappe.utils.data import add_to_date


class EWaybillAPI(BaseAPI):
    API_NAME = "e-Waybill"
    BASE_PATH = "ewb/ewayapi"
    SENSITIVE_HEADERS = BaseAPI.SENSITIVE_HEADERS + ("password",)
    IGNORED_ERROR_CODES = {
        #  Cancel e-waybill errors
        "312": "This eway bill is either not generated by you or cancelled",
    }

    def setup(self, doc=None, *, company_gstin=None):
        self.gst_settings = frappe.get_cached_doc("GST Settings")
        self.BASE_PATH = "enriched/ewb/ewayapi"
        if not self.settings.enable_e_waybill:
            frappe.throw(_("Please enable e-Waybill features in GST Settings first"))

        if doc:
            company_gstin = doc.company_gstin
            self.default_log_values.update(
                reference_doctype=doc.doctype,
                reference_name=doc.name,
            )

        if self.sandbox_mode:
            company_gstin = "05AAACG2115R1ZN"
            self.username = "05AAACG2115R1ZN"
            self.password = "abc123@@"

        elif not company_gstin:
            frappe.throw(_("Company GSTIN is required to use the e-Waybill API"))

        else:
            self.fetch_credentials(company_gstin, "e-Waybill / e-Invoice")

        self.default_headers.update(
            {
                "authorization": get_auth_token(self),
                "gstin": company_gstin,
                "username": self.username,
                "password": self.password,
                "requestid": str(base64.b64encode(os.urandom(18))),
            }
        )
    

    def post(self, action, json):
        return super().post(params={"action": action}, json=json)

    def get_e_waybill(self, ewaybill_number):
        return self.get("getewaybill", params={"ewbNo": ewaybill_number})

    def generate_e_waybill(self, data):
        result = self.post("GENEWAYBILL", data)
        self.update_distance(result)
        return result

    def cancel_e_waybill(self, data):
        return self.post("CANEWB", data)

    def update_vehicle_info(self, data):
        return self.post("VEHEWB", data)

    def update_transporter(self, data):
        return self.post("UPDATETRANSPORTER", data)

    def extend_validity(self, data):
        return self.post("EXTENDVALIDITY", data)

    def update_distance(self, result):
        if (
            (alert := result.get("alert"))
            and "Distance" in alert
            and (distance_match := re.search(DISTANCE_REGEX, alert))
        ):
            result.distance = int(distance_match.group())

    def handle_failed_response(self, response_json):
        message = response_json.get("message", "")

        for error_code, error_message in self.IGNORED_ERROR_CODES.items():
            if error_message in message:
                response_json.error_code = error_code
                return True

def get_auth_token(self):
    if time_diff_in_seconds(self.gst_settings.token_expiry, now_datetime()) < 150.0 or not self.gst_settings.auth_token:
        fetch_auth_token(self)

    return self.gst_settings.auth_token

def fetch_auth_token(self):
    client_id, client_secret = get_client_details(self)
    headers = {"gspappid": client_id, "gspappsecret": client_secret}
    res = {}
    url = "https://gsp.adaequare.com/gsp/authenticate?grant_type=token"\

    res = make_request("post", url, headers = headers)
    self.gst_settings.auth_token = "{} {}".format(
        res.get("token_type"), res.get("access_token")
    )

    self.gst_settings.token_expiry = add_to_date(None, seconds=res.get("expires_in"))
    self.gst_settings.save(ignore_permissions=True)
    self.gst_settings.reload()

def get_client_details(self):
	if self.gst_settings.get('client_id') and self.gst_settings.get('client_secret'):
		return self.gst_settings.get('client_id'), get_decrypted_password("GST Settings", "GST Settings", fieldname = "client_secret")

	return frappe.conf.einvoice_client_id, frappe.conf.einvoice_client_secret
